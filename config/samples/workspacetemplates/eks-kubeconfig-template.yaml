apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: WorkspaceTemplate
metadata:
  name: eks-kubeconfig-template
  namespace: default
spec:
  template:
    metadata:
      description: "Template for generating EKS kubeconfig"
      version: "1.0.0"
      tags:
        provider: "aws"
        resource: "eks-kubeconfig"
        environment: "dev"
    spec:
      writeConnectionSecretToRef:
        name: "${WORKSPACE_NAME}-outputs-kubeconfig"
        namespace: default
      providerConfigRef:
        name: aws-provider-config
      forProvider:
        source: Inline
        enableTerraformCLILogging: true
        vars:
          - key: cluster_name
            value: "${cluster_name}"
          - key: region
            value: "${region}"
          - key: cluster_endpoint
            value: "${cluster_endpoint}"
          - key: cluster_certificate_authority_data
            value: "${cluster_certificate_authority_data}"
        module: |
          variable "cluster_name" {
            type        = string
            description = "Name of the EKS cluster"
          }

          variable "region" {
            type        = string
            description = "AWS region of the EKS cluster"
          }

          variable "cluster_endpoint" {
            type        = string
            description = "Endpoint URL of the EKS cluster"
          }

          variable "cluster_certificate_authority_data" {
            type        = string
            description = "Certificate authority data for the EKS cluster"
          }

          data "external" "eks_token" {
            program = ["sh", "-c", "AWS_CONFIG_FILE=${path.module}/aws-creds.ini aws eks get-token --output json --cluster-name ${var.cluster_name} --region ${var.region} | jq -r '{token: .status.token}'"]
          }

          output "kubeconfig" {
            description = "Kubeconfig in YAML format"
            sensitive   = true
            value      = <<-EOT
            apiVersion: v1
            clusters:
            - cluster:
                certificate-authority-data: ${var.cluster_certificate_authority_data}
                server: ${var.cluster_endpoint}
              name: ${var.cluster_name}.${var.region}.eksctl.io
            contexts:
            - context:
                cluster: ${var.cluster_name}.${var.region}.eksctl.io
                user: rancher-installer@${var.cluster_name}.${var.region}.eksctl.io
              name: rancher-installer@${var.cluster_name}.${var.region}.eksctl.io
            current-context: rancher-installer@${var.cluster_name}.${var.region}.eksctl.io
            kind: Config
            preferences: {}
            users:
            - name: rancher-installer@${var.cluster_name}.${var.region}.eksctl.io
              user:
                token: "${data.external.eks_token.result.token}"
            EOT
          }
